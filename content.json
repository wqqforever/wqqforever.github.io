{"meta":{"title":"三公里外的风","subtitle":null,"description":"wqq -> blog","author":"三公里外的风","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"时间复杂度","slug":"时间复杂度","date":"2019-08-02T14:15:15.000Z","updated":"2019-08-02T14:17:12.774Z","comments":true,"path":"2019/08/02/时间复杂度/","link":"","permalink":"http://yoursite.com/2019/08/02/时间复杂度/","excerpt":"","text":"时间复杂度主要参考了csdn上的一篇博客讲解，链接如下：https://blog.csdn.net/qq_41523096/article/details/82142747","categories":[],"tags":[]},{"title":"git学习","slug":"git学习","date":"2019-07-31T08:13:45.000Z","updated":"2019-07-31T12:54:27.510Z","comments":true,"path":"2019/07/31/git学习/","link":"","permalink":"http://yoursite.com/2019/07/31/git学习/","excerpt":"","text":"Git简介Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 Git安装（for windows）安装步骤移步至my first blog Git学习笔记创建版本库创建一个空目录 12$ mkdir learngit$ cd learngit 将这个目录变为git仓库 1$ git init 在此目录下任意创建一个文件，如readme.txt，将这个文件放入git仓库的步骤 1$ git add readme.txt 1$ git commit -m &quot;a readme file&quot; *引号内为文件描述 版本回退工作区和暂存区管理修改撤销修改删除文件 远程仓库添加远程库克隆远程库 参考文献廖雪峰的官方网站","categories":[],"tags":[]},{"title":"markdown学习","slug":"markdown学习","date":"2019-07-31T08:13:26.000Z","updated":"2019-07-31T12:24:42.781Z","comments":true,"path":"2019/07/31/markdown学习/","link":"","permalink":"http://yoursite.com/2019/07/31/markdown学习/","excerpt":"","text":"Markdown简介Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。 用途Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。用于编写说明文档，并且以“README.md”的文件名保存在软件的目录下面。除此之外，由于我们有了RStudio这样的神级编辑器，我们还可以快速将Markdown转化为演讲PPT、Word产品文档、LaTex论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown已经广泛使用，极大地推进了动态可重复性研究的历史进程。 vscode使用markdown1、安装插件在VSCode扩展商店中安装如下的两个插件:（1）markdownlint 语法提示（2）Markdown Preview Enhanced 预览显示 2、使用预览（1）新建md文件并点击右上角预览按钮。 (2)查看预览。 markdown使用语法 标题设置第一种方法：在标题文字前加#，一级标题为#，二级标题为##，三级标题为###，以此类推，最多六级，其中一级标题文字最大。第二种方法：在标题文字下行输入–（符号前不可有空格），可表示二级标题。在标题文字下行输入==，可表示一级标题。 引用块注释“&gt;”在一段文字前表示引用(去掉引号) 图片 列表 链接 代码 To be continued","categories":[],"tags":[]},{"title":"修改篇","slug":"修改篇","date":"2019-07-31T02:31:01.000Z","updated":"2019-07-31T02:35:20.689Z","comments":true,"path":"2019/07/31/修改篇/","link":"","permalink":"http://yoursite.com/2019/07/31/修改篇/","excerpt":"","text":"写在前面在学习技术的过程中，个人博客的确能给自身带来特别大的帮助。从b站up主codesheep的视频里学会了如何搭建基于hexo框架的个人博客。我的第一篇博客就来记录一下搭建过程。以下基于windows。 准备工作安装git for windows官网地址：https://git-scm.com/download/win网速可能会很慢，可以右键复制链接，使用迅雷下载，或者使用其他镜像地址，我使用的是前者。 安装完成后，运行git bash输入以下命令： 12$ git config --global user.name \"Your Name\"$ git config --global user.email \"email@example.com\" 到这一步就设置完成了，之后所有的命令提示符执行均在git bash中运行 安装node.js,npm官网地址：https://nodejs.org/en/ NPM（节点包管理器）是Node.JS的包管理器，用于节点插件管理（包括安装，卸载，管理依赖等）因为谷歌安装插件是从国外服务器下载，受网络影响大，可能出现异常，所以乐于分享的淘宝团队干了这事,来自官网:”这是一个完整npmjs.org镜像，你可以用此代替官方版本（只读），同步频率目前为10分钟一次以保证尽量与官方服务同步。”安装方式：命令提示符执行 1$ npm install cnpm -g --registry=https://registry.npm.taobao.org 具体步骤使用cnpm安装hexo框架安装方式：命令提示符执行 1$ cnpm install -g hexo-cli 建立一个文件夹：12$ mkdir blog$ cd blog/ 之后用hexo生成的博客文件均在此目录下，blog即根目录。 使用hexo生成博客1$ hexo init 注意，是在blog下执行，等待一段时间后，出现提示： Start blogging with Hexo! 即成功。 启动博客1$ hexo server 或者输入缩写：hexo s 在浏览器中输入：localhost：4000现在已经可以访问到自己的博客了，默认创建了一篇文章：Hello World ，介绍了hexo简单的命令操作 部署到GitHub这一步就是为了把博客部署到远端公开使用登陆自己的GitHub，新建一个仓库：new repository，仓库命名必须符合特定要求：yourname.github.io如我的仓库名称为：wqqforever.github.io,之后部署完就可以在浏览器中输入这个地址访问自己的博客。create，创建完成。 部署插件回到git bash，blog目录下，安装git部署插件 1$ cnpm install --save hexo-deployer-git 设置配置文件编辑blog目录下的 _config.yml，可以用vim，也可以用nano，或者vs code等等 1$ nano _config.yml 找到最下方的 #Deployment，加入以下命令： 123$ type: git$ repo: https://github.com/wqqforever/wqqforever.github.io.git$ branch: master 注意上面的repo地址需要返回刚才创建的GitHub仓库，复制ssh地址 保存文件，退出 部署到远端1$ hexo deploy 或者简写成：hexo d 第一次部署需要输入GitHub账号和密码 部署完成后返回自己的GitHub，刷新一下，发现刚才建立的新仓库多了很多内容，这些就是博客文件 访问博客浏览器输入 https://wqqforever.github.io 这个地址是你自己刚才创建的仓库名，之后就可以使用这个地址访问个人博客，而不需要输入localhost：4000了 FAQ问：博客搭建过程中出现问题怎么办？ 答：最简单粗暴的解决方式，把blog文件夹删除，也不过是重头再来！！！ 参考文献 https://wqqforever.github.io https://space.bilibili.com/384068749/","categories":[],"tags":[]},{"title":"写博客时的一些小问题","slug":"second","date":"2019-07-30T13:55:55.000Z","updated":"2019-07-31T07:52:48.729Z","comments":true,"path":"2019/07/30/second/","link":"","permalink":"http://yoursite.com/2019/07/30/second/","excerpt":"","text":"写博客时出现的问题汇总图片无法显示大致原因（1）本地图片没有上传至github仓库中，导致引用无效解决方案：安装 hexo-asset-image 插件 1$ npm install https://github.com/CodeFalling/hexo-asset-image --save 再打开站点配置文件_config.yml，修改以下内容： 1post_asset_folder:true 之后使用hexo n 生成新博客，同时会生成同名的文件夹，把需要引用的图片放到这个文件夹中 （2）本地图片没有放在同名文件夹中解决方案：将图片放在同名文件夹下 两种标签插件百度了一些网站，很多都是表明不能使用markdown插入图片方式，因为这样会导致图片远端无法显示，虽然在本地文章是可以显示的，但是我自己亲自使用了两种方式，结果如下： 1.markdown 1![img1](/second/img1.png) 效果图： 2. 1&#123;% asset_img img1.png This is an example image %&#125; 效果图： 小结写第一篇博客（my first blog）的时候没有安装插件，所以图片都不能加载，之后安装了插件，设置了站点配置文件，然后手动创建了同名文件夹，把之前的图片放在了里面，按照以上两种标签插入，重新部署之后，图片均无法显示，所以我创建了一篇用来测试的博客（修改篇），同名文件夹是自动创建的，以markdown方式插入图片，重新部署之后是上面第一种效果图，以第二种方式插入，图片无法显示。。。过了一段时间我再去访问my first blog，图片可以显示了（markdown标签方式），所以markdown方式插入图片是亲测可行的。 参考文献https://blog.csdn.net/xjm850552586/article/details/84101345","categories":[],"tags":[]},{"title":"my first blog","slug":"my-first-blog","date":"2019-07-30T04:55:11.000Z","updated":"2019-07-31T02:22:18.560Z","comments":true,"path":"2019/07/30/my-first-blog/","link":"","permalink":"http://yoursite.com/2019/07/30/my-first-blog/","excerpt":"","text":"写在前面在学习技术的过程中，个人博客的确能给自身带来特别大的帮助。从b站up主codesheep的视频里学会了如何搭建基于hexo框架的个人博客。我的第一篇博客就来记录一下搭建过程。以下基于windows。 准备工作安装git for windows官网地址：https://git-scm.com/download/win网速可能会很慢，可以右键复制链接，使用迅雷下载，或者使用其他镜像地址，我使用的是前者。 安装完成后，运行git bash输入以下命令： 12$ git config --global user.name \"Your Name\"$ git config --global user.email \"email@example.com\" 到这一步就设置完成了，之后所有的命令提示符执行均在git bash中运行 安装node.js,npm官网地址：https://nodejs.org/en/ NPM（节点包管理器）是Node.JS的包管理器，用于节点插件管理（包括安装，卸载，管理依赖等）因为谷歌安装插件是从国外服务器下载，受网络影响大，可能出现异常，所以乐于分享的淘宝团队干了这事,来自官网:”这是一个完整npmjs.org镜像，你可以用此代替官方版本（只读），同步频率目前为10分钟一次以保证尽量与官方服务同步。”安装方式：命令提示符执行 1$ npm install cnpm -g --registry=https://registry.npm.taobao.org 具体步骤使用cnpm安装hexo框架安装方式：命令提示符执行 1$ cnpm install -g hexo-cli 建立一个文件夹：12$ mkdir blog$ cd blog/ 之后用hexo生成的博客文件均在此目录下，blog即根目录。 使用hexo生成博客1$ hexo init 注意，是在blog下执行，等待一段时间后，出现提示： Start blogging with Hexo! 即成功。 启动博客1$ hexo server 或者输入缩写：hexo s 在浏览器中输入：localhost：4000现在已经可以访问到自己的博客了，默认创建了一篇文章：Hello World ，介绍了hexo简单的命令操作 部署到GitHub这一步就是为了把博客部署到远端公开使用登陆自己的GitHub，新建一个仓库：new repository，仓库命名必须符合特定要求：yourname.github.io如我的仓库名称为：wqqforever.github.io,之后部署完就可以在浏览器中输入这个地址访问自己的博客。create，创建完成。 部署插件回到git bash，blog目录下，安装git部署插件 1$ cnpm install --save hexo-deployer-git 设置配置文件编辑blog目录下的 _config.yml，可以用vim，也可以用nano，或者vs code等等 1$ nano _config.yml 找到最下方的 #Deployment，加入以下命令： 123$ type: git$ repo: https://github.com/wqqforever/wqqforever.github.io.git$ branch: master 注意上面的repo地址需要返回刚才创建的GitHub仓库，复制ssh地址 保存文件，退出 部署到远端1$ hexo deploy 或者简写成：hexo d 第一次部署需要输入GitHub账号和密码 部署完成后返回自己的GitHub，刷新一下，发现刚才建立的新仓库多了很多内容，这些就是博客文件 访问博客浏览器输入 https://wqqforever.github.io 这个地址是你自己刚才创建的仓库名，之后就可以使用这个地址访问个人博客，而不需要输入localhost：4000了 FAQ问：博客搭建过程中出现问题怎么办？ 答：最简单粗暴的解决方式，把blog文件夹删除，也不过是重头再来！！！ 参考文献 https://wqqforever.github.io https://space.bilibili.com/384068749/","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-07-30T03:05:19.454Z","updated":"2019-07-30T03:05:19.454Z","comments":true,"path":"2019/07/30/hello-world/","link":"","permalink":"http://yoursite.com/2019/07/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}